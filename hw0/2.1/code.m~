% Clear Command Window
clc

% Retain current plot when adding new plots
hold on

% Generate 1000 points from 2D multivariate normal distribution
mu = [1; 1];
sigma = [0.1 -0.05; -0.05 0.2];
rng default  % For reproducibility
points = transpose(mvnrnd(mu, sigma, 4));

% TODO: refactor using arrayfun
% Scatter plot randomly generated points with points lying outside 
% f(x, 3) = 0 showing in black while points inside shown in blue
% points inside shown in blue.
r = 3;
pointsValues = [];
for i = 1 : size(points, 2)
   point = points(:, i);
   pointValue = f(point, r);
   pointsValues = [pointsValues, pointValue];
end

% pointsValues2 = arrayfun(@(x) f(x, 3), points)
% cellfun(@(p) f(p, 3), points, 'UniformOutput', false)

% Test: points to values
test_points = [1, 2; 3, 4]
test_values = [];
for i = 1 : size(test_points, 2)
   p = test_points(:, i);
   pv = test_function(p, 3);
   test_values = [test_values, pv];
end

test_values

% Test: Refactor to arrayfun
test_points2 = [1, 2; 3, 4]
test_values2 = arrayfun(@(x) test_function(x, 3), test_points2(:, 2))

r = arrayfun(@(i) first(A(:,i)), 1:size(A,2)); 

pointsInside = pointsValues <= 0;
pointsOutside = pointsValues > 0;

pointSize = 10;
scatter(points(1,pointsInside),points(2,pointsInside),pointSize,'b','filled');
scatter(points(1,pointsOutside),points(2,pointsOutside),pointSize,'k','filled');

% Calculate limits of plot using min and max values of x and y
xmin = min(points(1,:));
ymin = min(points(2,:));
xmax = max(points(1,:));
ymax = max(points(2,:));

limits = [xmin, xmax, ymin, ymax];

% Disable warnings for fcontour
warning('off','all')

% Show the level sets f(x, r) = 0 for r = 1, 2, 3
r1 = fcontour(@(x,y) f([x;y], 1), limits, 'LevelList', 0, 'LineColor', 'm', 'LineWidth', 1.5);
r2 = fcontour(@(x,y) f([x;y], 2), limits, 'LevelList', 0, 'LineColor', 'c', 'LineWidth', 1.5);
r3 = fcontour(@(x,y) f([x;y], 3), limits, 'LevelList', 0, 'LineColor', 'r', 'LineWidth', 1.5);

% Enable warnings
warning('on','all')

% Title of the plot showing how many points lie outside f(x, 3) = 0
title(strcat(num2str(nnz(pointsOutside)),' points outside f(x, 3) = 0'), 'FontSize', 14);
xlabel('x');
ylabel('y');
zlabel('f(x,r)');
legend([r1, r2, r3], 'f(x,1)=0', 'f(x,2)=0', 'f(x,3)=0');

% Stop retaining current plot when adding new plots
hold off

% Define function f(x, r)
function y = f(x, r)
    mu = [1; 1];
    sigma = [0.1 -0.05; -0.05 0.2];
    y = (transpose(x - mu) * inv(sigma) * (x - mu)) ./ 2 - r;
end

% Test
function z = test_function(x, y)
    z = norm(x) + y;
end